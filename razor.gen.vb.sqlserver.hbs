{{#each Items}}
'/===============================================================\
'| razor data (experimental) - rev 4.2.866                       |
'|---------------------------------------------------------------|
'|  Template: gen.vb.sqlserver (experimental version)            |
'|   Website: http://www.pigford.net/razor                       |
'|                                                               |
'| Known Issues:                                                 |
'|  Data Types not supported due to type mapping issues: money,  |
'| date, varchar(1), nvarchar(1)                                 |
'\===============================================================/
{{!===============================================================}}
{{! Release: razor data (experimental)                            }}
{{!===============================================================}}
{{! Update:  6/15/2015 - Added this header and comment            }}
{{! Update:  8/12/2015 - Added Multikey support and Alpha Keys    }}
{{! Update:  8/12/2015 - Adjusted one occurance of name vs alias  }}
{{! Update:  8/20/2015 - Added configuration settings for         }}
{{!                      table, column, data object prefix text   }}
{{!                      to handle troublesome column names.      }}
{{! Update: 10/05/2015 - Fixed issue related to save of a primary }}
{{!                      key that is an auto id to set the        }}
{{!                      data object id.                          }}
{{! Update: 10/05/2015 - Fixed issue to filter out computed and   }}
{{!                      concurrency columns when building column }}
{{!                      list values.                             }}
{{! Update: 10/05/2015 - Fixed missing AND in LoadBy_IDX and PK   }}
{{!                      methods generated SQL statement where.   }}
{{! Update: 10/07/2015 - Fixed save method SQL parameter mis-     }}
{{!                      alignment of parameter name and object   }}
{{! Update: 12/23/2015 - Added support for schema names preceeding}}
{{!                      TSQL object names.                       }}
{{! Update: 12/28/2015 - Bug fix on schema name in update         }}
{{! Update: 01/13/2016 - Included table alias prefix on data class}}
{{! Update: 01/15/2016 - Added events for save and load callbacks }}
{{! Update: 01/27/2016 - Added optional object parameter to init  }}
{{!                      the data object returned from LoadByPK   }}
{{! Update: 01/31/2016 - Added support for data object isDirty    }}
{{!                      tracking and building dynamic updates.   }}
{{! Update: 02/09/2016 - Fixed issue with generated INSERT that   }}
{{!                      was including columns types of calculated}}
{{!                      and concurrency.  Now excluded on insert.}}
{{! Update: 02/16/2016 - Added LoadBy methods that support sub-   }}
{{!                      classed data objects.  Uses reflection.  }}
{{! Update: 03/11/2016 - When no PKs exist on a table, omit       }}
{{!                      delete, save and load by primary key.    }}
{{! Update: 05/03/2016 - Overloaded delete to support by PK       }}
{{! Update: 05/05/2016 - Only mark dirty flag if value not same.  }}
{{! Update: 05/21/2016 - Name change to razor data                }}
{{! Update: 06/02/2016 - Added namespace of razor                 }}
{{! Update: 06/03/2016 - Disabled namespace of razor              }}
{{! Update: 06/07/2016 - Added namespace of razor                 }}
{{! Update: 09/08/2016 - Added SQL Transaction support            }}
{{!===============================================================}}
{{! This template currently only works with a SQLServer database  }}
{{!                                                               }}
{{! Known Issues:                                                 }}
{{!  Data Types not supported due to type mapping issues: money,  }}
{{! date, varchar(1), nvarchar(1)                                 }}
{{!                                                               }}
{{!                                                               }}
{{!                                                               }}
{{!===============================================================}}
Imports System.Data.SqlClient
.
Namespace razor
Partial Public Class {{xSettings.TableAliasPrefix}}{{Alias}}
{{#if IsTable}}
{{#if PrimaryKeys}}
.
{{else}}
	'No PrimaryKeys
{{/if}}
.
{{#if PrimaryKeys}}
.
	Public Shared Sub Delete(ByRef pRowData As {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}})
		Delete(pRowData, Nothing)
	End Sub
.
    Public Shared Sub Delete(ByRef pRowData As {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}}, ByRef pTransaction as SqlClient.SqlTransaction)
        Dim zSQL As String = ""
        Dim zMode As String = ""
.
		If {{#each PrimaryKeys}}razor.UtilSQLServer.IsKeySet(pRowData.{{xSettings.ColumnAliasPrefix}}{{Alias}}){{#xNotLast}} And {{/xNotLast}}{{/each}} Then
            'Delete
            zMode = "DELETE"
            zSQL = "DELETE FROM [{{Schema}}].[{{Name}}] " & _
                    "WHERE {{#each PrimaryKeys}}[{{Name}}] = @{{xSettings.ColumnAliasPrefix}}{{Alias}}{{#xNotLast}} AND {{/xNotLast}}{{/each}}"
.
            Dim zCmd As New SQLCommand
            zCmd.CommandText = zSQL
			{{#each PrimaryKeys}}
            zCmd.Parameters.Add(New SQLParameter("@{{xSettings.ColumnAliasPrefix}}{{Alias}}", pRowData.{{xSettings.ColumnAliasPrefix}}{{Alias}}))
			{{/each}}
.
			zCmd.Transaction=pTransaction
            razor.UtilSQLServer.ExecuteNonQuery(zCmd)
        End If
.
    End Sub
.
	Public Shared Sub Delete({{#each PrimaryKeys}}{{xNotFirst ", "}}p{{xSettings.ColumnAliasPrefix}}{{Alias}} As {{LanguageType}}{{/each}})
    	Delete({{#each PrimaryKeys}}{{xNotFirst ", "}}p{{xSettings.ColumnAliasPrefix}}{{Alias}}{{/each}}, Nothing)
    End Sub	
.
.
	Public Shared Sub Delete({{#each PrimaryKeys}}{{xNotFirst ", "}}p{{xSettings.ColumnAliasPrefix}}{{Alias}} As {{LanguageType}}{{/each}}, ByRef pTransaction as SqlClient.SqlTransaction)
        Dim zSQL As String = ""
        Dim zMode As String = ""
.
          'Delete
            zMode = "DELETE"
            zSQL = "DELETE FROM [{{Schema}}].[{{Name}}] " & _
                    "WHERE {{#each PrimaryKeys}}[{{Name}}] = @{{xSettings.ColumnAliasPrefix}}{{Alias}}{{#xNotLast}} AND {{/xNotLast}}{{/each}}"
.
            Dim zCmd As New SQLCommand
            zCmd.CommandText = zSQL
			{{#each PrimaryKeys}}
            zCmd.Parameters.Add(New SQLParameter("@{{xSettings.ColumnAliasPrefix}}{{Alias}}", p{{xSettings.ColumnAliasPrefix}}{{Alias}}))
			{{/each}}
.
			zCmd.Transaction=pTransaction
            razor.UtilSQLServer.ExecuteNonQuery(zCmd)
.
    End Sub	
.
    Public Shared Sub Save(ByRef pRowData As {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}})
		Save(pRowData, Nothing)
	End Sub
.
    Public Shared Sub Save(ByRef pRowData As {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}}, ByRef pTransaction as SqlClient.SqlTransaction)
        Dim zSQL As String = ""
        Dim zMode As String = ""
		DIm zExistInDB as Long = -1
		If {{#each PrimaryKeys}}razor.UtilSQLServer.IsKeySet(pRowData.{{xSettings.ColumnAliasPrefix}}{{Alias}}){{#xNotLast}} And {{/xNotLast}}{{/each}} Then
.
			zSQL = "SELECT COUNT(*) from [{{Schema}}].[{{Name}}] WHERE {{#each PrimaryKeys}}[{{Name}}] = @{{xSettings.ColumnAliasPrefix}}{{Alias}}{{#xNotLast}} AND {{/xNotLast}}{{/each}}"
.
			Dim zCmdDoesExist as New SQLCommand
.
			zCmdDoesExist.CommandText = zSQL
.
			{{#each PrimaryKeys}}
			zCmdDoesExist.Parameters.Add(new SQLParameter("@{{xSettings.ColumnAliasPrefix}}{{Alias}}", pRowData.{{xSettings.ColumnAliasPrefix}}{{Alias}}))
			{{/each}}
.
			'if zExistInDB > 0  then  PK exists in the DB
  		    zCmdDoesExist.Transaction = pTransaction
			zExistInDB = razor.UtilSQLServer.ExecuteScalar(zCmdDoesExist)
		End If
.
		If {{#each PrimaryKeys}}razor.UtilSQLServer.IsKeySet(pRowData.{{xSettings.ColumnAliasPrefix}}{{Alias}}){{#xNotLast}} And {{/xNotLast}}{{/each}} And zExistInDB > 0 Then
			zMode = "UPDATE"
		End If
		If {{#each PrimaryKeys}}razor.UtilSQLServer.IsKeySet(pRowData.{{xSettings.ColumnAliasPrefix}}{{Alias}}){{#xNotLast}} And {{/xNotLast}}{{/each}} And zExistInDB = 0 Then
			zMode = "INSERTwithKey"
		End If
		If {{#each PrimaryKeys}}Not razor.UtilSQLServer.IsKeySet(pRowData.{{xSettings.ColumnAliasPrefix}}{{Alias}}){{#xNotLast}} Or {{/xNotLast}}{{/each}} Then
			zMode = "INSERTnoKey"
		End If
.
		Select Case zMode
			Case "UPDATE"
				If pRowData.IsDirty Then
					Dim zUpdate As String = ""
					Dim zSet As String = ""
					Dim zWhere As String = ""
					zUpdate = "UPDATE [{{Schema}}].[{{Name}}] SET " 
					{{#each Columns}}
					{{#xIfNotAny IsComputed IsConcurrency IsAutoKey IsInPrimaryKey "===" true}}
	                If pRowData.IsDirty({{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{../../Alias}}.FieldIndex.{{xSettings.ColumnAliasPrefix}}{{Alias}}) Then 
						If zSet.Length > 0 Then zSet = zSet & ","
						zSet = zSet & " [{{Name}}] = @{{xSettings.ColumnAliasPrefix}}{{Alias}} "
					End If
	                {{/xIfNotAny}}
					{{/each}}
					zWhere = " WHERE {{#each PrimaryKeys}}[{{Name}}] = @{{xSettings.ColumnAliasPrefix}}{{Alias}}{{#xNotLast}} AND {{/xNotLast}}{{/each}}"
					zSQL = zUpdate & zSet & zWhere
				End If
			Case "INSERTwithKey"
				zSQL = "INSERT INTO [{{Schema}}].[{{Name}}] ({{#each Columns}}{{#xIfNotAny IsAutoKey IsComputed IsConcurrency "===" true}}{{xHashtable "Comma"}}[{{Name}}]{{xHashtable "Comma" ", "}}{{/xIfNotAny}}{{/each}}){{xHashtable}}" & _
						" VALUES ({{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency IsAutoKey "===" true}}{{xHashtable "Comma"}}@{{xSettings.ColumnAliasPrefix}}{{Alias}}{{xHashtable "Comma" ", "}}{{/xIfNotAny}}{{/each}}){{xHashtable}}"
			Case "INSERTnoKey"
				zSQL = "INSERT INTO [{{Schema}}].[{{Name}}] ({{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency IsAutoKey IsInPrimaryKey "===" true}}{{xHashtable "Comma"}}[{{Name}}]{{xHashtable "Comma" ", "}}{{/xIfNotAny}}{{/each}}){{xHashtable}}" & _
                        " VALUES ({{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency IsAutoKey IsInPrimaryKey "===" true}}{{xHashtable "Comma"}}@{{xSettings.ColumnAliasPrefix}}{{Alias}}{{xHashtable "Comma" ", "}}{{/xIfNotAny}}{{/each}}){{xHashtable}}"
			Case Else
		End Select
.
.
        Dim zCmd As New SQLCommand
        zCmd.CommandText = zSQL
		If zMode <> "INSERTnoKey" Then
		{{#each Columns}}
		{{#xIfAny IsAutoKey IsInPrimaryKey "===" true}}
	    	zCmd.Parameters.Add(New SQLParameter("@{{xSettings.ColumnAliasPrefix}}{{Alias}}", pRowData.{{xSettings.ColumnAliasPrefix}}{{Alias}}))
		{{/xIfAny}}
		{{/each}}
		End If
.
		{{#each Columns}}
		{{#xIfAll IsAutoKey IsInPrimaryKey "===" false}}
		{{#xIfNotAny IsComputed IsConcurrency "===" true}}
			If zMode = "INSERTwithKey" Or zMode = "INSERTnoKey" Or pRowData.IsDirty({{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{../../../Alias}}.FieldIndex.{{xSettings.ColumnAliasPrefix}}{{Alias}}) Then
        		zCmd.Parameters.Add(New SqlParameter("@{{xSettings.ColumnAliasPrefix}}{{Alias}}", IIf(pRowData.{{xSettings.ColumnAliasPrefix}}{{Alias}} Is Nothing, DBNull.Value, pRowData.{{xSettings.ColumnAliasPrefix}}{{Alias}})))
			End If
		{{/xIfNotAny}}
		{{/xIfAll}}
		{{/each}}
.
		zCmd.Transaction=pTransaction
        If zMode = "INSERTnoKey" Then
	        Dim zLastId As Long = 0
	        zLastId = razor.UtilSQLServer.ExecuteNonQueryRowId(zCmd)
.
		  {{! TODO: Can you have multiple autokeys in a single table? }}
		  {{#each Columns}}
		  {{#xIfAny IsAutoKey IsInPrimaryKey "===" true}}
            pRowData.{{xSettings.ColumnAliasPrefix}}{{Alias}} = zLastId
		  {{/xIfAny}}
		  {{/each}}
		Else
			razor.UtilSQLServer.ExecuteNonQuery(zCmd)
        End If
.
		pRowData.SetIsDirty(False)
		pRowData.RaiseSavedEvent()
.
	End Sub
.
	Public Shared Function LoadByPrimaryKey({{#each PrimaryKeys}}{{xNotFirst ", "}}p{{xSettings.ColumnAliasPrefix}}{{Alias}} As {{LanguageType}}{{/each}}, Optional pObject as {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}} = Nothing) As {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}}
		Return LoadByPrimaryKey({{#each PrimaryKeys}}{{xNotFirst ", "}}p{{xSettings.ColumnAliasPrefix}}{{Alias}}{{/each}}, Nothing, pObject)
	End Function
	
    Public Shared Function LoadByPrimaryKey({{#each PrimaryKeys}}{{xNotFirst ", "}}p{{xSettings.ColumnAliasPrefix}}{{Alias}} As {{LanguageType}}{{/each}}, pTransaction as SqlClient.SqlTransaction, Optional pObject as {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}} = Nothing) As {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}}
        Dim zReturn As New {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}}
        Dim zSQL As String = "SELECT * FROM [{{Schema}}].[{{Name}}] WHERE {{#each PrimaryKeys}}{{xNotFirst ' AND '}}[{{Name}}] = @{{xSettings.ColumnAliasPrefix}}{{Alias}}{{/each}}"
        Dim zCmd As New SQLCommand
        Dim zReader As SQLDataReader
.
        If Not pObject Is Nothing Then zReturn = pObject
.
        zCmd.CommandText = zSQL
		{{#each PrimaryKeys}}
    	zCmd.Parameters.Add(New SQLParameter("@{{xSettings.ColumnAliasPrefix}}{{Alias}}", p{{xSettings.ColumnAliasPrefix}}{{Alias}}))
		{{/each}}
		zCmd.Transaction=pTransaction
        zReader = razor.UtilSQLServer.ExecuteReader(zCmd)
.
        While zReader.Read
			{{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
            If Not zReader.IsDBNull(zReader.GetOrdinal("{{Name}}")) Then zReturn.{{xSettings.ColumnAliasPrefix}}{{Alias}} = zReader.GetSql{{DotNet_Type}}(zReader.GetOrdinal("{{Name}}"))
			{{/xIfNotAny}}{{/each}}
        End While
.
        zReader.Close()
        zReader = Nothing
.
		zReturn.SetIsDirty(False)		
		zReturn.RaiseLoadedEvent()
.
        Return zReturn
    End Function
{{/if}}
.
	{{#each Indexes}}
	Public Shared Function LoadByIDX_{{Name}}({{#each Columns}}{{xNotFirst ", "}}p{{xSettings.ColumnAliasPrefix}}{{Alias}} As {{LanguageType}}{{/each}}) As List(Of {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{../Alias}})
		Return LoadByIDX_{{Name}}({{#each Columns}}{{xNotFirst ", "}}p{{xSettings.ColumnAliasPrefix}}{{Alias}}{{/each}}, Nothing)
	End Function
	
	Public Shared Function LoadByIDX_{{Name}}({{#each Columns}}{{xNotFirst ", "}}p{{xSettings.ColumnAliasPrefix}}{{Alias}} As {{LanguageType}}{{/each}}, pTransaction As SqlClient.SqlTransaction) As List(Of {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{../Alias}})
        Dim zReturn As New List(Of {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{../Alias}})
        Dim zSQL As String = "SELECT * FROM [{{../Schema}}].[{{../Name}}] WHERE {{#each Columns}}{{xNotFirst ' AND '}}[{{Name}}] = @{{xSettings.ColumnAliasPrefix}}{{Alias}}{{/each}}"
        Dim zCmd As New SQLCommand
        Dim zReader As SQLDataReader
.
        zCmd.CommandText = zSQL
		{{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
    	zCmd.Parameters.Add(New SQLParameter("@{{xSettings.ColumnAliasPrefix}}{{Alias}}", p{{xSettings.ColumnAliasPrefix}}{{Alias}}))
		{{/xIfNotAny}}{{/each}}
		zCmd.Transaction=pTransaction
        zReader = razor.UtilSQLServer.ExecuteReader(zCmd)
.
        While zReader.Read
            Dim zObj As New {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{../Alias}}
			{{#each ../Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
            If Not zReader.IsDBNull(zReader.GetOrdinal("{{Name}}")) Then zObj.{{xSettings.ColumnAliasPrefix}}{{Alias}} = zReader.GetSql{{DotNet_Type}}(zReader.GetOrdinal("{{Name}}"))
			{{/xIfNotAny}}{{/each}}
			zObj.SetIsDirty(False)
            zReturn.Add(zObj)
			zObj.RaiseLoadedEvent()
        End While
.
        zReader.Close()
        zReader = Nothing
.
        Return zReturn
	End Function
.
	{{/each}}
.
#Region "Reflection Based LoadBy Functions"
	{{#each Indexes}}
.
	''' <summary>
    ''' Loads a list of items based on the supplied object type (Reflection Based Function)
    ''' </summary>
	Public Shared Function LoadByIDX_{{Name}}(Of T)({{#each Columns}}{{xNotFirst ", "}}p{{xSettings.ColumnAliasPrefix}}{{Alias}} As {{LanguageType}}{{/each}}) As List(Of T)
        Dim zReturn As New List(Of T)
        Dim zSQL As String = "SELECT * FROM [{{../Schema}}].[{{../Name}}] WHERE {{#each Columns}}{{xNotFirst ' AND '}}[{{Name}}] = @{{xSettings.ColumnAliasPrefix}}{{Alias}}{{/each}}"
        Dim zCmd As New SQLCommand
        Dim zReader As SQLDataReader
.
        zCmd.CommandText = zSQL
		{{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
    	zCmd.Parameters.Add(New SQLParameter("@{{xSettings.ColumnAliasPrefix}}{{Alias}}", p{{xSettings.ColumnAliasPrefix}}{{Alias}}))
		{{/xIfNotAny}}{{/each}}
        zReader = razor.UtilSQLServer.ExecuteReader(zCmd)
.
        While zReader.Read
            Dim zObj As Object = Activator.CreateInstance(Of T)()
            If Not TypeOf zObj Is {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{../Alias}} Then Throw New ArgumentException("Argument type is not type of {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{../Alias}}.","T")
.
			{{#each ../Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
            If Not zReader.IsDBNull(zReader.GetOrdinal("{{Name}}")) Then zObj.{{xSettings.ColumnAliasPrefix}}{{Alias}} = zReader.GetSql{{DotNet_Type}}(zReader.GetOrdinal("{{Name}}")).value
			{{/xIfNotAny}}{{/each}}
			zObj.SetIsDirty(False)
            zReturn.Add(zObj)
			zObj.RaiseLoadedEvent()
        End While
.
        zReader.Close()
        zReader = Nothing
.
        Return zReturn
	End Function
.
	{{/each}}	
.
#End Region
.
{{/if}}
	Public Shared Function LoadData(pSQL As String) As List(Of {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}})
		Return LoadData(pSQL, Nothing)
	End Function
.
    Public Shared Function LoadData(pSQL As String, ByRef pTransaction as SqlClient.SqlTransaction) As List(Of {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}})
        Dim zReturn As New List(Of {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}})
        Dim zSQL As String = "SELECT * FROM [{{Schema}}].[{{Name}}]"
        Dim zCmd As New SQLCommand
        Dim zReader As SQLDataReader
.
        If pSQL <> "" Then zSQL = pSQL
.
        zCmd.CommandText = zSQL
		zCmd.Transaction=pTransaction
        zReader = razor.UtilSQLServer.ExecuteReader(zCmd)
.
        While zReader.Read
            Dim zObj As New {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}}
			{{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
            If Not zReader.IsDBNull(zReader.GetOrdinal("{{Name}}")) Then zObj.{{xSettings.ColumnAliasPrefix}}{{Alias}} = zReader.GetSql{{DotNet_Type}}(zReader.GetOrdinal("{{Name}}"))
			{{/xIfNotAny}}{{/each}}
			zObj.SetIsDirty(False)
            zReturn.Add(zObj)
			zObj.RaiseLoadedEvent()
        End While
        zReader.Close()
        zReader = Nothing
.
        Return zReturn
    End Function
.
    Public Shared Function LoadData(Optional pCommand As SqlCommand = Nothing) As List(Of {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}})
        Dim zReturn As New List(Of {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}})
        Dim zSQL As String = "SELECT * FROM [{{Schema}}].[{{Name}}]"
        Dim zCmd As New SQLCommand
        Dim zReader As SQLDataReader
.
        If pCommand Is Nothing Then
            zCmd.CommandText = zSQL
        Else
            zCmd = pCommand
        End If
        zReader = razor.UtilSQLServer.ExecuteReader(zCmd)
        While zReader.Read
            Dim zObj As New {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}}		
			{{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
            If Not zReader.IsDBNull(zReader.GetOrdinal("{{Name}}")) Then 
				zObj.{{xSettings.ColumnAliasPrefix}}{{Alias}} = zReader.GetValue(zReader.GetOrdinal("{{Name}}"))
			End If
			{{/xIfNotAny}}{{/each}}
			zObj.SetIsDirty(False)
            zReturn.Add(zObj)
			zObj.RaiseLoadedEvent()
        End While
.
        zReader.Close()
        zReader = Nothing
.
        Return zReturn
    End Function
.
#Region "Reflection Based LoadData Functions"
	Public Shared Function LoadData(Of T)(pSQL As String) As List(Of T)
		Return LoadData(Of T)(pSQL, Nothing)
	End Function
.
    Public Shared Function LoadData(Of T)(pSQL As String, ByRef pTransaction As SqlClient.SqlTransaction) As List(Of T)
        Dim zReturn As New List(Of T)
        Dim zSQL As String = "SELECT * FROM [{{Schema}}].[{{Name}}]"
        Dim zCmd As New SQLCommand
        Dim zReader As SQLDataReader
.
        If pSQL <> "" Then zSQL = pSQL
.
        zCmd.CommandText = zSQL
		zCmd.Transaction=pTransaction
        zReader = razor.UtilSQLServer.ExecuteReader(zCmd)
.
        While zReader.Read
.
            Dim zObj As Object = Activator.CreateInstance(Of T)()
            If Not TypeOf zObj Is {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}} Then Throw New ArgumentException("Generic type is not type of {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}}.","T")
.
			{{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
            If Not zReader.IsDBNull(zReader.GetOrdinal("{{Name}}")) Then zObj.{{xSettings.ColumnAliasPrefix}}{{Alias}} = zReader.GetSql{{DotNet_Type}}(zReader.GetOrdinal("{{Name}}")).value
			{{/xIfNotAny}}{{/each}}
			zObj.SetIsDirty(False)
            zReturn.Add(zObj)
			zObj.RaiseLoadedEvent()
        End While
.
        zReader.Close()
        zReader = Nothing
.
        Return zReturn
    End Function
.

    Public Shared Function LoadData(Of T)(Optional pCommand As SqlCommand = Nothing) As List(Of T)
		Return LoadData(Of T)(Nothing, pCommand)
	End Function
	
    Public Shared Function LoadData(Of T)(ByRef pTransaction as SqlClient.SqlTransaction, Optional pCommand As SqlCommand = Nothing) As List(Of T)
        Dim zReturn As New List(Of T)
        Dim zSQL As String = "SELECT * FROM [{{Schema}}].[{{Name}}]"
        Dim zCmd As New SQLCommand
        Dim zReader As SQLDataReader
.
        If pCommand Is Nothing Then
            zCmd.CommandText = zSQL
        Else
            zCmd = pCommand
        End If
.
        zReader = razor.UtilSQLServer.ExecuteReader(zCmd)
.
        While zReader.Read
.
			Dim zObj As Object = Activator.CreateInstance(Of T)()
            If Not TypeOf zObj Is {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}} Then Throw New ArgumentException("Generic type is not type of {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}}.","T")
.
			{{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
            If Not zReader.IsDBNull(zReader.GetOrdinal("{{Name}}")) Then			
				zObj.{{xSettings.ColumnAliasPrefix}}{{Alias}} = zReader.GetValue(zReader.GetOrdinal("{{Name}}"))
			End If
			{{/xIfNotAny}}{{/each}}
			zObj.SetIsDirty(False)
            zReturn.Add(zObj)
			zObj.RaiseLoadedEvent()
        End While
.
        zReader.Close()
        zReader = Nothing
.
        Return zReturn
    End Function
#End Region
.
.
End Class
.
Partial Public Class {{xSettings.DataObjectPrefix}}{{xSettings.TableAliasPrefix}}{{Alias}}
.
 	Public Event Loaded()
	Public Event Saved()
.
    Public Sub RaiseLoadedEvent()
        RaiseEvent Loaded()
    End Sub
.
	Public Sub RaiseSavedEvent()
        RaiseEvent Saved()
    End Sub
	{{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
    Public Property {{xSettings.ColumnAliasPrefix}}{{Alias}}() As {{DotNet_NullableType}}
		Get
			Return m_{{xSettings.ColumnAliasPrefix}}{{Alias}}
		End Get
		Set
			If Not Same(m_{{xSettings.ColumnAliasPrefix}}{{Alias}}, Value) Then
				m_{{xSettings.ColumnAliasPrefix}}{{Alias}} = Value
				m_IsDirty(FieldIndex.{{xSettings.ColumnAliasPrefix}}{{Alias}}) = True
			End If
		End Set
	End Property
	Private m_{{xSettings.ColumnAliasPrefix}}{{Alias}} As {{DotNet_NullableType}}
.
	{{/xIfNotAny}}{{/each}}
.
	Public Function IsDirty(pIndex As FieldIndex) As Boolean
		Return m_IsDirty(pIndex)
	End Function
.
	''' <summary>
    ''' Determines if the row has pending changes.
    ''' </summary>
    Public Function IsDirty() As Boolean
        Return m_IsDirty.Contains(True)
    End Function
.
	Public Sub SetIsDirty(pDirty As Boolean)
	{{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
		m_IsDirty(FieldIndex.{{xSettings.ColumnAliasPrefix}}{{Alias}}) = pDirty
	{{/xIfNotAny}}{{/each}}
	End Sub
.
	Public Enum FieldIndex
	{{#each Columns}}{{#xIfNotAny IsComputed IsConcurrency "===" true}}
    	{{xSettings.ColumnAliasPrefix}}{{Alias}} {{xFirst " = 1"}}
	{{/xIfNotAny}}{{/each}}
    End Enum
.
	Private m_IsDirty({{Columns.Count}}) As Boolean
.
    Private Function [Same](pValue1 As Object, pValue2 As Object) As Boolean
        If pValue1 Is Nothing And (Not pValue2 Is Nothing) Then
            Return False
        End If
.
        If (Not pValue1 Is Nothing) And pValue2 Is Nothing Then
            Return False
        End If
.
        If pValue1 <> pValue2 Then
            Return False
        End If
.
        Return True
    End Function
.
End Class
End Namespace
.
{{xFile Alias path=xSettings.OutputPath prefix=xSettings.TableAliasPrefix suffix="" ext="vb"}}
{{/each}}
.
.
{{!===============================================================}}
{{! Release: razor JSON (experimental)                            }}
{{!===============================================================}}
{{! Update: 03/22/2016 - Initial Version                          }}
{{! Update: 03/31/2016 - Updated to use LanguageType to detect    }}
{{!                      string types when setting default values }}
{{!===============================================================}}
{{! This template currently only works with a SQLServer database  }}
{{!                                                               }}
{{! Known Issues:                                                 }}
{{!                                                               }}
{{!                                                               }}
{{!                                                               }}
{{!===============================================================}}
{{#each Items}}
/*/===============================================================\
  | razor JSON (experimental) - rev 4.2.11                        |
  |---------------------------------------------------------------|
  |  Template: gen.vb.sqlserver (experimental version)            |
  |   Website: http://www.pigford.net/razor                       |
  |                                                               |
  | Known Issues:                                                 |
  \===============================================================/*/
.
[{
	{{#each Columns}}
	"{{xSettings.ColumnAliasPrefix}}{{Alias}}":{{#xIf LanguageType "===" "String"}}"{{Name}}"{{else}}{{#xIf DataTypeName "===" "int"}}1{{else}}{{#xIf DataTypeName "===" "numeric"}}1.5{{else}}null{{/xIf}}{{/xIf}}{{/xIf}}{{xNotLast ", "}}
	{{/each}}
}]
{{xFile Alias path=xSettings.OutputPath prefix=xSettings.TableAliasPrefix suffix="" ext="json"}}
{{/each}}
.
.
{{!===============================================================}}
{{! Release: razor doc (experimental)                             }}
{{!===============================================================}}
{{! Update: 03/22/2016 - Initial Version                          }}
{{!===============================================================}}
{{! This template currently only works with a SQLServer database  }}
{{!                                                               }}
{{! Known Issues:                                                 }}
{{!                                                               }}
{{!                                                               }}
{{!                                                               }}
{{!===============================================================}}
{{#each Items}}
/===============================================================\
| razor doc (experimental) - rev 4.2.14                         |
|---------------------------------------------------------------|
|  Template: gen.vb.sqlserver (experimental version)            |
|   Website: http://www.pigford.net/razor                       |
|                                                               |
| Known Issues:                                                 |
\===============================================================/
.
{{#if IsTable}}Table{{else}}View{{/if}}: {{xSettings.TableAliasPrefix}}{{Alias}} --> [{{Name}}]
.
{{#each Columns}}
  {{xSettings.ColumnAliasPrefix}}{{Alias}} --> [{{Name}}] {{DataTypeNameComplete}}{{#if IsInPrimaryKey}} **PK**{{/if}}{{#if IsAutoKey}} identity{{/if}}{{#if IsNullable}} null{{else}} not null{{/if}}
{{/each}}
.
{{xFile Alias path=xSettings.OutputPath prefix=xSettings.TableAliasPrefix suffix="" ext="txt"}}
{{/each}}
.
.
{{!===============================================================}}
{{! Release: razor query (experimental)                           }}
{{!===============================================================}}
{{! Update: 03/23/2016 - Initial Version                          }}
{{! Update: 03/24/2016 - Moved query code into engine as base     }}
{{! Update: 05/03/2016 - Added Object2Column to map row object    }}
{{!                      attribute names to database column names }}
{{! Update: 05/03/2016 - Added Object2LangType to map row object  }}
{{!                      attribute types to return language types }}
{{! Update: 05/03/2016 - Renamed Object2Column to MemberColumn    }}
{{! Update: 05/03/2016 - Added Member to pull data column by name }}
{{! Update: 05/03/2016 - Renamed Object2LangType to MemberLangType}}
{{! Update: 06/02/2016 - Add filter for IsComputed and IsConcurr  }}
{{! Update: 06/02/2016 - Added namespace of razor                 }}
{{! Update: 06/03/2016 - Disabled namespace of razor              }}
{{! Update: 06/07/2016 - Added namespace of razor                 }}
{{! Update: 08/24/2016 - Added schema to table name function      }}
{{!===============================================================}}
{{! This template currently only works with a SQLServer database  }}
{{!                                                               }}
{{! Known Issues:                                                 }}
{{!                                                               }}
{{!                                                               }}
{{!                                                               }}
{{!===============================================================}}
{{#each Items}}
'/===============================================================\
'| razor query (experimental) - rev 4.2.269                      |
'|---------------------------------------------------------------|
'|  Template: gen.vb.sqlserver (experimental version)            |
'|   Website: http://www.pigford.net/razor                       |
'|                                                               |
'| Known Issues:                                                 |
'\===============================================================/
.
Namespace razor
Public Class {{xSettings.QueryAliasPrefix}}{{Alias}}
    Inherits razor.UtilSQLServer.Query
.
    Private _Members As New Dictionary(Of String, Object)
.
	{{#each Columns}}
	{{#xIfNotAny IsComputed IsConcurrency "===" true}}
    Public {{xSettings.ColumnAliasPrefix}}{{Alias}} As New razor.UtilSQLServer.{{LanguageType}}DataColumn
	{{/xIfNotAny}}
	{{/each}}
.
    Public Sub New()
        MyBase.FirstColumn = _FirstColumn()
        MyBase.TableName = _TableName()
	{{#each Columns}}
		{{#xIfNotAny IsComputed IsConcurrency "===" true}}
        {{xSettings.ColumnAliasPrefix}}{{Alias}}.ColumnName = "[{{Name}}]"
		{{/xIfNotAny}}
	{{/each}}
.
	{{#each Columns}}
		{{#xIfNotAny IsComputed IsConcurrency "===" true}}
        _Members.Add("{{xSettings.ColumnAliasPrefix}}{{Alias}}", {{xSettings.ColumnAliasPrefix}}{{Alias}})
		{{/xIfNotAny}}
	{{/each}}
    End Sub
.
    Public Function Member(pObjectName As String) As Object
        Dim zReturn As Object = Nothing
        If _Members.ContainsKey(pObjectName) Then
            zReturn = _Members.Item(pObjectName)
        Else
            Throw New System.Exception("pObjectName=[" & pObjectName & "] does not exist in member dictionary.")
        End If
        Return zReturn
    End Function
.
    Public Function MemberColumn(pObjectName As String) As String
        Select Case pObjectName
		{{#each Columns}}
		{{#xIfNotAny IsComputed IsConcurrency "===" true}}
	        Case "{{xSettings.ColumnAliasPrefix}}{{Alias}}"
				Return "[{{Name}}]"
		{{/xIfNotAny}}
		{{/each}}
            Case Else
                Throw New System.Exception("pObjectName=[" & pObjectName & "] does not exist in column list.")
        End Select
    End Function
.
    Public Function MemberLangType(pObjectName As String) As String
        Select Case pObjectName
		{{#each Columns}}
		{{#xIfNotAny IsComputed IsConcurrency "===" true}}
	        Case "{{xSettings.ColumnAliasPrefix}}{{Alias}}"
				Return "{{LanguageType}}"
		{{/xIfNotAny}}
		{{/each}}
            Case Else
                Throw New System.Exception("pObjectName=[" & pObjectName & "] does not exist in column list.")
        End Select
    End Function
.
	Private Function _TableName() As String
        Return "[{{Schema}}].[{{Name}}]"
    End Function
.
    Private Function _FirstColumn() As String
        Return "[{{Columns.[0].Name}}]"
    End Function
.
End Class
End namespace
.
{{xFile Alias path=xSettings.OutputPath prefix=xSettings.QueryAliasPrefix suffix="" ext="vb"}}
{{/each}}
.